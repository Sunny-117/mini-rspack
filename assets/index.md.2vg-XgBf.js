import{_ as i,c as a,o as n,ae as t}from"./chunks/framework.osJJb4L7.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"mini-rspack","text":"A simplified Rspack bundler using Rust","tagline":"High-performance JavaScript bundling with Rust and Node.js","image":{"src":"https://assets.rspack.dev/rspack/rspack-logo.svg","alt":"mini-rspack"},"actions":[{"theme":"brand","text":"Get Started","link":"/guide/"},{"theme":"alt","text":"View on GitHub","link":"https://github.com/Sunny-117/mini-rspack"}]},"features":[{"icon":"ðŸš€","title":"High Performance","details":"Built with Rust for improved performance compared to JavaScript-based bundlers"},{"icon":"ðŸ”Œ","title":"Webpack Compatible","details":"Familiar API for webpack users, making migration easy"},{"icon":"ðŸ§©","title":"Extensible","details":"Support for plugins and loaders to extend functionality"},{"icon":"ðŸ”„","title":"Watch Mode","details":"Automatically rebuild when files change"}]},"headers":[],"relativePath":"index.md","filePath":"index.md"}'),e={name:"index.md"};function l(r,s,p,o,h,k){return n(),a("div",null,s[0]||(s[0]=[t(`<h2 id="what-is-mini-rspack" tabindex="-1">What is mini-rspack? <a class="header-anchor" href="#what-is-mini-rspack" aria-label="Permalink to &quot;What is mini-rspack?&quot;">â€‹</a></h2><p>mini-rspack is a simplified implementation of Rspack bundler using Rust and Node.js bindings. It demonstrates how to create a JavaScript bundler with Rust for improved performance. This project serves as an educational resource for understanding modern bundler architecture and the internals of tools like webpack and rspack.</p><h2 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">â€‹</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Clone the repository</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/Sunny-117/mini-rspack.git</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mini-rspack</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install dependencies</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Build the Rust code</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Create a configuration file</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> createCompiler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;mini-rspack&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">const</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compiler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> createCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Run the compiler</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compiler.run((err,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  console.log(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;Compilation successful!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-label="Permalink to &quot;Features&quot;">â€‹</a></h2><ul><li><strong>Webpack-compatible API</strong>: Familiar interface for webpack users</li><li><strong>Support for CommonJS and ES modules</strong>: Handle both module formats</li><li><strong>Entry point processing</strong>: Support for multiple entry points</li><li><strong>Module resolution</strong>: Resolve dependencies between modules with custom resolver</li><li><strong>Plugin system with hooks</strong>: Extend functionality with plugins (similar to Tapable)</li><li><strong>Loader system</strong>: Transform module content with loaders</li><li><strong>Watch mode</strong>: Automatically rebuild when files change</li><li><strong>Comprehensive test suite</strong>: Tests in both Rust and JavaScript</li></ul><h2 id="technical-implementation" tabindex="-1">Technical Implementation <a class="header-anchor" href="#technical-implementation" aria-label="Permalink to &quot;Technical Implementation&quot;">â€‹</a></h2><ul><li><strong>Rust Core</strong>: Core bundling logic implemented in Rust for performance</li><li><strong>napi-rs</strong>: Node.js native modules from Rust code with proper bindings</li><li><strong>Module Parsing</strong>: Regex and basic AST analysis to extract dependencies</li><li><strong>Dependency Resolution</strong>: Path resolution similar to Node.js module resolution</li><li><strong>Code Generation</strong>: JavaScript bundle with proper module wrapping and runtime</li><li><strong>Hook System</strong>: Hook-based plugin system similar to webpack&#39;s Tapable</li></ul>`,8)]))}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
