/**
 * A simplified BannerPlugin that adds a banner to output files
 */
class BannerPlugin {
  constructor(options = {}) {
    if (typeof options === 'string') {
      this.banner = options;
    } else {
      this.options = Object.assign({
        banner: '/* This file is generated by mini-rspack */',
        raw: false,
        entryOnly: false,
        test: /\.js$/,
      }, options);
      
      this.banner = this.options.banner;
    }
  }
  
  apply(compiler) {
    // Hook into the emit event
    compiler.hooks.emit.tap('BannerPlugin', (compilation) => {
      console.log('BannerPlugin: Adding banners to files');
      
      // Add the banner to all JS files
      Object.keys(compilation.assets).forEach(filename => {
        // Check if the file matches the test pattern
        if (this.options && this.options.test) {
          const test = this.options.test;
          const isMatch = test instanceof RegExp ? test.test(filename) : filename.endsWith(test);
          
          if (!isMatch) {
            return;
          }
        }
        
        // Check if we should only process entry files
        if (this.options && this.options.entryOnly) {
          const entryNames = Object.keys(compilation.options.entry.entries);
          const isEntry = entryNames.some(entryName => filename === `${entryName}.js`);
          
          if (!isEntry) {
            return;
          }
        }
        
        // Add the banner to the file
        const content = compilation.assets[filename];
        const banner = this.options && this.options.raw ? this.banner : `/*! ${this.banner} */\n`;
        
        compilation.assets[filename] = `${banner}${content}`;
        
        console.log(`BannerPlugin: Added banner to ${filename}`);
      });
    });
  }
}

module.exports = BannerPlugin;
