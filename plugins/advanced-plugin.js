/**
 * 高级plugin示例，演示如何使用plugin钩子和选项
 */
class AdvancedPlugin {
  constructor(options = {}) {
    this.options = Object.assign({
      banner: '/* Generated by Advanced Plugin */',
      footer: '/* End of file */',
      test: /\.js$/,
    }, options);
  }
  
  apply(compiler) {
    // 在编译开始前执行
    compiler.hooks.beforeCompile.tap('AdvancedPlugin', (compilation) => {
      console.log('AdvancedPlugin: beforeCompile hook');
    });
    
    // 在编译过程中执行
    compiler.hooks.compile.tap('AdvancedPlugin', (compilation) => {
      console.log('AdvancedPlugin: compile hook');
    });
    
    // 在生成资源前执行
    compiler.hooks.emit.tap('AdvancedPlugin', (compilation) => {
      console.log('AdvancedPlugin: emit hook');
      
      // 处理所有资源
      Object.keys(compilation.assets).forEach(filename => {
        // 检查文件是否匹配测试模式
        if (this.options.test.test(filename)) {
          // 获取原始内容
          const originalContent = compilation.assets[filename];
          
          // 添加banner和footer
          const newContent = `${this.options.banner}\n${originalContent}\n${this.options.footer}`;
          
          // 更新资源
          compilation.assets[filename] = newContent;
          
          console.log(`AdvancedPlugin: Processed ${filename}`);
        }
      });
      
      // 生成资源清单
      const manifest = {
        generatedAt: new Date().toISOString(),
        files: Object.keys(compilation.assets),
      };
      
      // 添加资源清单
      compilation.assets['manifest.json'] = JSON.stringify(manifest, null, 2);
      
      console.log('AdvancedPlugin: Generated manifest.json');
    });
    
    // 在编译完成后执行
    compiler.hooks.done.tap('AdvancedPlugin', (stats) => {
      console.log('AdvancedPlugin: done hook');
      console.log(`AdvancedPlugin: Compilation completed in ${stats.time || 0}ms`);
    });
  }
}

module.exports = AdvancedPlugin;
